%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Предикаты работы со списками (мои версии)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% length(List, N)
% Определяет длину списка
my_length([], 0).
my_length([_|T], N) :-
    my_length(T, N1),
    N is N1 + 1.

% member(Element, List)
% Проверяет, принадлежит ли элемент списку
my_member(X, [X|_]).
my_member(X, [_|T]) :-
    my_member(X, T).

% append(List1, List2, Result)
% Конкатенация двух списков
my_append([], L, L).
my_append([H|T], L2, [H|R]) :-
    my_append(T, L2, R).

% remove(Element, List, Result)
% Удаляет одно вхождение элемента из списка
my_remove(_, [], []).
my_remove(X, [X|T], T) :- !.
my_remove(X, [H|T], [H|R]) :-
    my_remove(X, T, R).

% permute(List, Permutation)
% Генерирует перестановки элементов списка
my_permute([], []).
my_permute(L, [H|T]) :-
    my_remove(H, L, rest),
    my_permute(rest, T).

% sublist(Sub, List) 
% Проверяет, является ли Sub подпоследовательностью List
my_sublist([], _).                          
my_sublist([H|T1], [H|T2]) :-               
    my_sublist(T1, T2).
my_sublist(Sub, [_|T]) :-                
    my_sublist(Sub, T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Задание 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Удаление всех элементов списка по значению
% remove_all(Element, List, Result)
% Удаляет все элементы, равные Element, из списка List

% Без использования встроенных предикатов для удаления элементов
remove_all(_, [], []).  
remove_all(X, [X|T], R) :- 
    remove_all(X, T, R), !.
remove_all(X, [H|T], [H|R]) :-  
    remove_all(X, T, R).

% С использованием встроенных предикатов для удаления элементов
remove_all_builtin(X, L, R) :-
    exclude(=(X), L, R).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Задание 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%  Слияние двух упорядоченных списков
% merge_sorted(List1, List2, Result)
% Объединяет два упорядоченных списка в один упорядоченный список

% Без использования встроенных предикатов для слияния списков
merge_sorted([], L, L) :- !.
merge_sorted(L, [], L) :- !.
merge_sorted([H1|T1], [H2|T2], [H1|R]) :-
    H1 =< H2, !,
    merge_sorted(T1, [H2|T2], R).
merge_sorted([H1|T1], [H2|T2], [H2|R]) :-
    merge_sorted([H1|T1], T2, R).

% С использованием встроенных предикатов для слияния списков
merge_sorted_builtin(L1, L2, R) :-
    append(L1, L2, Temp),
    sort(Temp, R).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Содержательный пример совместного использования предикатов 
% merge_sorted и remove_all
% Допустим, сольем два упорядоченных списка с возможными дубликатами
% и затем удалим все вхождения определенного элемента из результата
% Пример запроса:
% ?- merge_sorted([1,3,5], [2,3,4,3,6], R1),
%    remove_all(3, R1, R2).
% R1 = [1,2,3,3,3,4,5,6],
% R2 = [1,2,4,5,6].
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%